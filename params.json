{"name":"Sarus","tagline":"SEO friendly Crane for your unlimited content. Say bye bye to pagers.","body":"# About\r\n\r\nSarus is a frontend framework based on AngularJS to display any number of posts without using a pager. It implements an infinite scroll but maintains url of the post in the browser's address bar. A continous mapping of urls allows search engines to count page hits accurately and also allow users to easily share posts.\r\n\r\n# Features\r\n\r\n## Fast\r\nIt loads data along scrolling. Hence speed to load nth post is equal to loading first post.\r\n## Purely frontend\r\nIt is completely independent of the way data is stored in the backend. It uses API or RSS feeds to fetch the posts providing complete abstraction between frontend and backend. This also makes it compatible to use with apps that use mobile/CMS/propreitary solutions to store data.\r\n## Easy to set up\r\nIt comes with enough inline documentation for anyone to start using. HTML partials are easy to maintain and indentify.\r\n## SEO friendly infinite scroll\r\nAlong infinite scroll, it maintains url paths of posts in browser's address bar. This allows search engines to index your content regularly.\r\n## Infinitely customizable\r\nBeing based on AngularJS, it allows any level of customization in design and functionality. It is as easy to customize as it is to set up.\r\n## Responsive\r\nThe framework uses Zurb Foundation. It is responsive OOB.\r\n## Maintains browser history\r\nIt maintains users' browser history using HTML5 History API. Bookmark and find your visited articles with ease. \r\n## Sharethis\r\nSharethis comes bundled with it to allow easy sharing across social media.\r\n\r\n# Requirements\r\n\r\nMinimum requirement is following tags in feed XML:\r\n\r\n`<title></title>`\r\n\r\n`<link></link>`\r\n\r\n`<description></description>`\r\n\r\nFor an API call, following urls are required:\r\n\r\n> /:count\r\n\r\n> /offset/:slug/:count\r\n\r\n> /slugs/:offset/:count\r\n\r\n_These urls are defined in the RSS server script in the bundle. See below._\r\n\r\n## Installation\r\n\r\nData is fed into Sarus through API or RSS.\r\n\r\n### Using Feeds\r\nA NodeJS script to convert RSS feeds into required format comes in the bundle.\r\n\r\n1. Replace line 22 with feed url at server/RSS/app.js.\r\n\r\n2. Modify the endpoint to Node server's path on line 9 at js/controllers.js e.g. http://localhost:3000\r\n\r\n### Using API\r\nSarus can be used with custom API. This API should return content in JSON with minimum of following keys:\r\n\r\n> title\r\n\r\n> link\r\n\r\n> description\r\n\r\n1. Modify the endpoint to the address of API calls on line 9 at js/controllers.js e.g. http://example.com. Do not add trailing slash.\r\n\r\n\r\n# [DEMO](http://sarus.srijanlabs.com)\r\n\r\n\r\n### Follow us on [Twitter](https://twitter.com/projectsarus) for updates\r\n\r\n\r\n***\r\n\r\nDeveloped by\r\n[Aditya](https://twitter.com/adityaraj),\r\n[Arijit](https://twitter.com/fotuzlab) and \r\n[Ravish](https://twitter.com/ray1claw)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}